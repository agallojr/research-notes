
-- Getting a quantum & CFD education --

For the past several weeks we've been trying to get an education on quantum topics as well as CFD - by reading texts and other materials, consuming videos, writing coding (e.g. quantum circuits with PennyLane), and otherwise kicking tires on the tooling (e.g. OpenFOAM and ParaView).  This is in preparation for  upcoming events in these intersecting fields in 2024, CFD being a potential application of quantum.  At this stage we're not interested in quantum supremacy, we're simply interested in potential applications of the technology - build it and then make it fast.  

Some events in the plan include:
    - DARPA open house in June, topics including quantum
    - Griffiss open house in June, focused on quantum 
    - VKI quantum for CFD training in July 
    - IEEE quantum week in September
    - SC24 in November


Running OpenFOAM in Docker:
    docker run -it -v ./openfoam:/home/openfoam/data --rm openfoam/openfoam11-paraview510
    blockMesh   
    foamRun
    (ParaView) - open "system/controlDict", select attributes and click "apply", can then play the simulation


-- "Chat"GPTs as the new aggregator -- 

Some current uses of the chat-oriented GPTs (leaving out highly specialized pattern matching applications such as algorithmic search, molecular pattern finding, etc):
    - window dressing
    - short parameter-driven dialogues akin to Alexa skills (e.g. "make a dinner reservation")
    - conversation / document summarization
    - general code & document generation assist (specific code requires specific training)
    - domain-specific code & document generation assist (requires specific training)

In the last point, the GPT becomes the new content aggregator in the organization.  Like Google, GPT starts to replace standard search.  Yet, all the same data stewardship issues remain as before.  

A for-example might be the Ansys GPT - a documentation assistant trained on Ansys-curated information.  An org might want to fork that, layering it with their own domain-specific training set.  Another future feature would be the ability to save user conversational state over long duration (Ansys wipes the state on each use - at what point does the GPT become bordering on useless for the advanced user?).  The Ansys GPT is really just a document summarizer - it does not take voice commands to run Ansys simulations.


-- The Quantum Stack -- 

Where we are: 
    - hardware technology (ions, photons, etc.) is not settled 
    - hardware is noisy and unreliable
    - hardware is at small scale 
    - software stacks, for example at the gate level, make assumptions about the hardware, some of which may not be correct
    - higher level software stacks are therefore not likely near or even on a trajectory to end state 
    - higher order structures for programming are just starting to emerge, where they exist at all 
    - architectures must be flexible
    - code must be modular assuming it will be rewritten

We note this is not unlike where the industry was in the 1950s with von Neumann machines.  We predict the ascent up the ladder of hardware stability and scalability and the associated programming abstractions will be much faster in this quantum iteration.


-- Quantum programming visualization --

Some things we might want to see: 
    - 2D/3D rendering of quantum circuits
    - topology of the real computer, with active/dead qubits, proximity constraints
    - per qubit state
    - multi-qubit state, system state
    - entanglement - which qubits, how entangled

Some of these are static renderings, some are live in the runtime.  Much of this exists - we can draw circuits, we can draw computer topologies (the data is also needed for circuit transpilation), bloch sphere, Qiskit's QSphere for multi-qubit state and phase up to some low limit (e.g. 5 qubits).  There's not much around entanglement, not much which can deal with large circuits or larger numbers of qubits, and there's no IDE which ties all these views up with a bow.

In transpilation, we take the circuit, which is itself an abstraction, and map it to the actual hardware.  Its possible (it would seem) to be able to design circuits which can't be transpiled onto a specific hardware device, or which due to large distances between qubits requiring swap gates, can't be transpiled efficiently.

Decision diagrams are an interesting way to visualize the running circuit.  Branches can be shown to collapse on measurement, for example.


-- Quantum programming - higher constructs -- 

In 1950, it was bits and gates.  Its 1950 again, but that won't last long.  Seeing for example in PennyLane patterns such as "amplitude amplification".  Transpilation provides another angle on abstractions.


-- Tutorials... --

Been enjoying the PennyLane tutorials both for content and style, but given that no one ever lost their job for recommending IBM, I was using Qiskit.  The tutorials for Qiskit however are lacking - the bulk have been deprecated, the github set to read-only.  Instead we have a couple of class-length tutorials by an authored professor.  That's fine if that's your entre, but if not... so back to the PennyLane tutorials, and the use of their SDK in general.  This does not obviate Qiskit, tho their SDK has undergone breaking change, their cloud simulators deprecated, and suggestions from Big Blue that you can't do anything with simulators north of 50 qubits (50!), so you should go buy a quantum computer - so you get more qubits, and can learn to deal with an immature noisy product.  

While the online Qiskit docs and tutorials are, to be nice, a "work in progress" with many gaps, the videos by John Waltrous on YouTube are excellent.  


-- Griffis Q4I -- 

I attended in late June, and a report-out is under separate file (Q4I-2024-debrief.docx).



